#!/bin/bash

#   Copyright (C) 2004 University of Oxford
#
#   Part of FSL - FMRIB's Software Library
#   http://www.fmrib.ox.ac.uk/fsl
#   fsl@fmrib.ox.ac.uk
#
#   Edits by Matt Allbright
#   https://github.com/mattallbright
#   allbrigh@psychiatry.arizona.edu
#
#   Developed at FMRIB (Oxford Centre for Functional Magnetic Resonance
#   Imaging of the Brain), Department of Clinical Neurology, Oxford
#   University, Oxford, UK
#
#   Modified at the SCAN Lab (Social, Cognitive, and Affective Neuroscience
#   Laboratory), Department of Psychiatry, University of Arizona, Tucson,
#   Arizona
#
#   LICENCE
#
#   FMRIB Software Library, Release 5.0 (c) 2012, The University of
#   Oxford (the "Software")
#
#   The Software remains the property of the University of Oxford ("the
#   University").
#
#   The Software is distributed "AS IS" under this Licence solely for
#   non-commercial use in the hope that it will be useful, but in order
#   that the University as a charitable foundation protects its assets for
#   the benefit of its educational and research purposes, the University
#   makes clear that no condition is made or to be implied, nor is any
#   warranty given or to be implied, as to the accuracy of the Software,
#   or that it will be suitable for any particular purpose or for use
#   under any specific conditions. Furthermore, the University disclaims
#   all responsibility for the use which is made of the Software. It
#   further disclaims any liability for the outcomes arising from using
#   the Software.
#
#   The Licensee agrees to indemnify the University and hold the
#   University harmless from and against any and all claims, damages and
#   liabilities asserted by third parties (including claims for
#   negligence) which arise directly or indirectly from the use of the
#   Software or the sale of any products based on the Software.
#
#   No part of the Software may be reproduced, modified, transmitted or
#   transferred in any form or by any means, electronic or mechanical,
#   without the express permission of the University. The permission of
#   the University is not required if the said reproduction, modification,
#   transmission or transference is done without financial return, the
#   conditions of this Licence are imposed upon the receiver of the
#   product, and all original and amended source code is included in any
#   transmitted product. You may be held legally responsible for any
#   copyright infringement that is caused or encouraged by your failure to
#   abide by these terms and conditions.
#
#   You are not permitted under this Licence to use this Software
#   commercially. Use for which any financial return is received shall be
#   defined as commercial use, and includes (1) integration of all or part
#   of the source code or the Software into a product for sale or license
#   by or on behalf of Licensee to third parties or (2) use of the
#   Software or any derivative of it for research with the final aim of
#   developing software products for sale or license to a third party or
#   (3) use of the Software or any derivative of it for research with the
#   final aim of developing non-software products for sale or license to a
#   third party, or (4) use of the Software to provide any service to an
#   external organisation for which payment is received. If you are
#   interested in using the Software commercially, please contact Isis
#   Innovation Limited ("Isis"), the technology transfer company of the
#   University, to negotiate a licence. Contact details are:
#   innovation@isis.ox.ac.uk quoting reference DE/9564.

export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${FSLDIR}/lib:/usr/local/cuda/lib64

Usage() {
    echo "bedpostx_gpu (SCANLab V0.1a) - Possibly Very Broken Edition"
    echo ""
    echo "Usage: bedpostx_gpu <subject_directory> [options]"
    echo ""
    echo "expects to find bvals and bvecs in subject directory"
    echo "expects to find data and nodif_brain_mask in subject directory"
    echo "expects to find grad_dev in subject directory, if -g is set"
    echo ""
    echo "<options>:"
    #echo "-QSYS (Queue System, 0 use fsl_sub: FMRIB, 1 TORQUE (default): WashU)"
    #echo "-Q (name of the GPU(s) queue, default gpu.q (defined in environment variable: FSLGECUDAQ)"
    echo "-NJOBS (number of jobs to queue, the data is divided in NJOBS parts, useful for a GPU cluster, default 4)"
    echo "-n (number of fibres per voxel, default 3)"
    echo "-w (ARD weight, more weight means less secondary fibres per voxel, default 1)"
    echo "-b (burnin period, default 1000)"
    echo "-j (number of jumps, default 1250)"
    echo "-s (sample every, default 25)"
    echo "-model (Deconvolution model. 1: with sticks, 2: with sticks with a range of diffusivities (default), 3: with zeppelins)"
    echo "-g (consider gradient nonlinearities, default off)"
    echo ""
    echo ""
    echo "ALTERNATIVELY: you can pass on xfibres options onto directly bedpostx"
    echo " For example:  bedpostx_gpu <subject directory> --noard --cnonlinear"
    echo " Type 'xfibres --help' for a list of available options "
    echo " Default options will be bedpostx default (see above), and not xfibres default."
    echo ""
    echo "Note: Use EITHER old OR new syntax."
    exit 1
}

monitor(){
    cat <<EOM > ${subjdir}.bedpostX/monitor
#!/bin/sh
nparts=0
if [ $njobs -eq 1 ]; then
#1 part (GPU) and several subparts
#voxels processed in each subpart are 12800 or more if the last one is less than 6400 (1 part less)
	nparts=\$(($nvox/12800))
	if [ \$nparts%12800 != 0 ];then
		nparts=\$((\$nparts + 1))
	fi
	last_part=\$(($nvox-(((\$nparts-1))*12800)))
	if [ \$last_part -lt 6400 ];then
		nparts=\$((\$nparts - 1))
	fi
else
	nparts=$njobs
fi

echo
echo "------ Bedpostx GPU Monitor ------"
echo "--- Possibly Not Good Edition ---"
finished=0
lastprinted=0
havedad=2
while [ \$finished -eq 0 ] ; do
    nfin=0
    part=0
    errorFiles=\`ls ${subjdir}.bedpostX/logs/*.e* 2> /dev/null \`
    for errorFile in \$errorFiles
    do
        if [ -s \$errorFile ]; then
            echo An error ocurred. Please check file \$errorFile
            kill -9 $$
            exit 1
        fi
    done
    while [ \$part -le \$nparts ];do
        if [ -e ${subjdir}.bedpostX/logs/monitor/\$part ]; then
            nfin=\$((\$nfin + 1))
        fi
        part=\$((\$part + 1))
    done
    newmessages=\$((\$nfin - \$lastprinted))
    while [ "\$newmessages" -gt 0 ];do
        lastprinted=\$((\$lastprinted + 1))
        echo \$lastprinted parts processed out of \$nparts
        newmessages=\$((\$newmessages - 1))
    done
    if [ -f ${subjdir}.bedpostX/xfms/eye.mat ] ; then
        finished=1
        echo "All parts processed"
	exit
    fi
    if [ ! \$havedad -gt 0 ]; then
       exit 0
    fi
    if [ "x$FSLPARALLEL" = "x" ]; then
        havedad=\`ps -e -o pid 2>&1| grep "$$\\b" | wc -l\`
    fi
    sleep 50;
done
EOM
    chmod +x ${subjdir}.bedpostX/monitor
}

make_absolute(){
    dir=$1;
    if [ -d ${dir} ]; then
	OLDWD=`pwd`
	cd ${dir}
	dir_all=`pwd`
	cd $OLDWD
    else
	dir_all=${dir}
    fi
    echo ${dir_all}
}

[ "$1" = "" ] && Usage

myopts="$@"
subjdir=`make_absolute $1`
subjdir=`echo $subjdir | sed 's/\/$/$/g'`

echo "---------------------------------------------"
echo "------------ BedpostX GPU Version -----------"
echo "----------Possibly Not Good Edition----------"
echo "---------------------------------------------"
echo subjectdir is $subjdir

#parse option arguments
qsys=0
queue="$FSLGECUDAQ"
njobs=4
nfibres=3
fudge=1
burnin=1000
njumps=1250
sampleevery=25
model=2
gflag=0
other=""
if [ "x$FSLPARALLEL" = "x" ]; then
  echo "FSLPARALLEL not set. In order to use bedpostx_gpu, FSLPARALLEL must be set,"
  echo "and a valid job scheduling system must be in place."
  exit -1
fi

shift
while [ ! -z "$1" ]
do
  case "$1" in
#      -QSYS) qsys=$2;shift;;
#      -Q) queue=$2;shift;;
      -NJOBS) njobs=$2;shift;;
      -n) nfibres=$2;shift;;
      -w) fudge=$2;shift;;
      -b) burnin=$2;shift;;
      -j) njumps=$2;shift;;
      -s) sampleevery=$2;shift;;
      -model) model=$2;shift;;
      -g) gflag=1;;
      *) other=$other" "$1;;
  esac
  shift
done
opts="--nf=$nfibres --fudge=$fudge --bi=$burnin --nj=$njumps --se=$sampleevery --model=$model"
defopts="--cnonlinear"
opts="$opts $defopts $other"

queueCmd="-q $queue"

# Check for Slurm
echo "Locating CUDA queue."
if [ -n "$FSLGECUDAQ" ]; then
  sinfo --hide --partition=$FSLGECUDAQ 2>&1 >/dev/null
	if [ $? -eq 0 ]; then
		echo "Found CUDA queue."
    queueCmd="-q $FSLGECUDAQ"
  else
    echo "No CUDA queue found. Exiting..."
    exit -1
	fi
fi

echo subjectdir is $subjdir

#check that all required files exist

if [ ! -d $subjdir ]; then
	echo "subject directory $1 not found"
	exit 1
fi

if [ ! -e ${subjdir}/bvecs ]; then
  if [ -e ${subjdir}/bvecs.txt ]; then
    mv ${subjdir}/bvecs.txt ${subjdir}/bvecs
  else
    echo "${subjdir}/bvecs not found"
    exit 1
  fi
fi

if [ ! -e ${subjdir}/bvals ]; then
  if [ -e ${subjdir}/bvals.txt ]; then
    mv ${subjdir}/bvals.txt ${subjdir}/bvals
  else
    echo "${subjdir}/bvals not found"
    exit 1
  fi
fi

if [ `${FSLDIR}/bin/imtest ${subjdir}/data` -eq 0 ]; then
  echo "${subjdir}/data not found"
  exit 1
fi

if [ ${gflag} -eq 1 ]; then
  if [ `${FSLDIR}/bin/imtest ${subjdir}/grad_dev` -eq 0 ]; then
    echo "${subjdir}/grad_dev not found"
    exit 1
  fi
fi

if [ `${FSLDIR}/bin/imtest ${subjdir}/nodif_brain_mask` -eq 0 ]; then
  echo "${subjdir}/nodif_brain_mask not found"
  exit 1
fi

if [ -e ${subjdir}.bedpostX/xfms/eye.mat ]; then
  echo "${subjdir} has already been processed: ${subjdir}.bedpostX."
  echo "Delete or rename ${subjdir}.bedpostX before repeating the process."
  exit 1
fi

echo Making bedpostx directory structure

mkdir -p ${subjdir}.bedpostX/
mkdir -p ${subjdir}.bedpostX/diff_parts
mkdir -p ${subjdir}.bedpostX/logs
mkdir -p ${subjdir}.bedpostX/logs/logs_gpu
mkdir -p ${subjdir}.bedpostX/logs/monitor
mkdir -p ${subjdir}.bedpostX/xfms

echo Queuing preprocessing stages
preprocid=`${FSLDIR}/bin/fsl_sub -v -F $queueCmd -N bpx_preproc_gpu -l ${subjdir}.bedpostX/logs ${FSLDIR}/bin/bedpostx_preproc_gpu.sh ${subjdir} ${gflag} $njobs | grep -oP "Submitted batch job\s+\K\w+"`
echo "Job submitted as job $preprocid"

nvox=`${FSLDIR}/bin/fslstats $subjdir/nodif_brain_mask -V  | cut -d ' ' -f1 `
echo Queuing parallel processing stage
[ -f ${subjdir}.bedpostX/commands.txt ] && rm ${subjdir}.bedpostX/commands.txt

monitor
if [ "x$FSLPARALLEL" = "x" ]; then
    ${subjdir}.bedpostX/monitor&
fi

part=0
while [ $part -lt $njobs ]
do
  partzp=`$FSLDIR/bin/zeropad $part 4`
  if [ ${gflag} -eq 1 ]; then
    gopts="$opts --gradnonlin=${subjdir}.bedpostX/grad_dev_$part"
  else
    gopts=$opts
  fi
  echo "${FSLDIR}/bin/bedpostx_single_part_gpu.sh ${subjdir} ${part} $njobs $nvox $gopts" \
  >> ${subjdir}.bedpostX/commands.txt
  part=$(($part + 1))
done
bedpostid=`${FSLDIR}/bin/fsl_sub -v -j $preprocid $queueCmd -l ${subjdir}.bedpostX/logs -N bedpostx_gpu -t ${subjdir}.bedpostX/commands.txt | grep -oP "Submitted batch job\s+\K\w+"`
echo "Job submitted as job $bedpostid"

echo Queuing post processing stage
mergeid=`${FSLDIR}/bin/fsl_sub -v -F -j $bedpostid $queueCmd -N bpx_postproc_gpu -l ${subjdir}.bedpostX/logs ${FSLDIR}/bin/bedpostx_postproc_gpu.sh ${subjdir} $nvox $njobs $gopts | grep -oP "Submitted batch job\s+\K\w+"`
echo "Job submitted as job $mergeid"

echo $mergeid > ${subjdir}.bedpostX/logs/$mergeid.out

if [ "x$FSLPARALLEL" != "x" ]; then
    echo
    echo Type ${subjdir}.bedpostX/monitor to show progress.
    echo Type ${subjdir}.bedpostX/cancel to terminate all the queued tasks.
    cat <<EOC > ${subjdir}.bedpostX/cancel
#!/bin/sh
scancel $mergeid
part=1
while [ $part -lt $njobs + 1 ]; do
  scancel $bedpostid_$part
  part=$(($part + 1))
done
scancel $bedpostid
scancel $preprocid
EOC
    chmod +x ${subjdir}.bedpostX/cancel

    echo
    echo You will get an email at the end of the post-processing stage.
    echo
else
    sleep 60
fi
